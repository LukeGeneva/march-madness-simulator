import random
import sys
from collections import Counter

def get_tourney_bracket():
	return [
		(1, "Villanova"),
		(16, "Mt. St. Mary's/N. Orleans"),
		(8, "Wisconsin"),
		(9, "Virginia Tech"),
		(5, "Virginia"),
		(12, "UNC Wilmington"),
		(4, "Florida"),
		(13, "East. Tenn. St."),
		(6, "SMU"),
		(11, "Providence"),
		(3, "Baylor"),
		(14, "New Mexico St."),
		(7, "South Carolina"),
		(10, "Marquette"),
		(2, "Duke"),
		(15, "Troy"),
		(1, "Gonzaga"),
		(16, "S. Dakota St."),
		(8, "Northwestern"),
		(9, "Vanderbilt"),
		(5, "Notre Dame"),
		(12, "Princeton"),
		(4, "West Virginia"),
		(13, "Bucknell"),
		(6, "Maryland"),
		(11, "Xavier"),
		(3, "Florida St."),
		(14, "Fla. Gulf Coast"),
		(7, "Saint Mary's"),
		(10, "VCU"),
		(2, "Arizona"),
		(15, "North Dakota"),
		(1, "Kansas"),
		(16, "NC Central/UC Davis"),
		(8, "Miami"),
		(9, "Michigan St."),
		(5, "Iowa St."),
		(12, "Nevada"),
		(4, "Purdue"),
		(13, "Vermont"),
		(6, "Creighton"),
		(11, "Rhode Island"),
		(3, "Oregon"),
		(14, "Iona"),
		(7, "Michigan"),
		(10, "Oklahoma St."),
		(2, "Louisville"),
		(15, "Jacksonville St."),
		(1, "North Carolina"),
		(16, "Texas Southern"),
		(8, "Arkansas"),
		(9, "Seton Hall"),
		(5, "Minnesota"),
		(12, "Middle Tenn."),
		(4, "Butler"),
		(13, "Winthrop"),
		(6, "Cincinnati"),
		(11, "Kansas St./Wake Forest"),
		(3, "UCLA"),
		(14, "Kent St."),
		(7, "Dayton"),
		(10, "Wichita St."),
		(2, "Kentucky"),
		(15, "Northern Kentucky")
	]

def get_history():
	return {
		(1,1): 50,
		(1,2): 52.8,
		(1,3): 60.6,
		(1,4): 68.6,
		(1,5): 84,
		(1,6): 68.8,
		(1,7): 83.3,
		(1,8): 80.5,
		(1,9): 90.4,
		(1,10): 85.7,
		(1,11): 50,
		(1,12): 100,
		(1,13): 100,
		(1,14): 50,
		(1,15): 50,
		(1,16): 100,
		(2,2): 50,
		(2,3): 62.3,
		(2,4): 44.4,
		(2,5): 20,
		(2,6): 72.2,
		(2,7): 72.2,
		(2,8): 44.4,
		(2,9): 50,
		(2,10): 60,
		(2,11): 92.2,
		(2,12): 100,
		(2,13): 50,
		(2,14): 50,
		(2,15): 93.8,
		(2,16): 50,
		(3,3): 50,
		(3,4): 62.5,
		(3,5): 50,
		(3,6): 54.8,
		(3,7): 60,
		(3,8): 100,
		(3,9): 100,
		(3,10): 69.2,
		(3,11): 70.8,
		(3,12): 50,
		(3,13): 50,
		(3,14): 83.6,
		(3,15): 100,
		(3,16): 50,
		(4,4): 50,
		(4,5): 55.1,
		(4,6): 33.3,
		(4,7): 40,
		(4,8): 30,
		(4,9): 66.7,
		(4,10): 100,
		(4,11): 50,
		(4,12): 68.4,
		(4,13): 80.3,
		(4,14): 50,
		(4,15): 50,
		(4,16): 50,
		(5,5): 50,
		(5,6): 100,
		(5,7): 50,
		(5,8): 25,
		(5,9): 33.3,
		(5,10): 100,
		(5,11): 50,
		(5,12): 66.9,
		(5,13): 80,
		(5,14): 50,
		(5,15): 50,
		(5,16): 50,
		(6,6): 50,
		(6,7): 62.5,
		(6,8): 25,
		(6,9): 50,
		(6,10): 60,
		(6,11): 64.9,
		(6,12): 50,
		(6,13): 50,
		(6,14): 87.5,
		(6,15): 50,
		(6,16): 50,
		(7,7): 50,
		(7,8): 50,
		(7,9): 50,
		(7,10): 60.5,
		(7,11): 0,
		(7,12): 50,
		(7,13): 50,
		(7,14): 100,
		(7,15): 66.7,
		(7,16): 50,
		(8,8): 50,
		(8,9): 52.6,
		(8,10): 50,
		(8,11): 100,
		(8,12): 0,
		(8,13): 100,
		(8,14): 50,
		(8,15): 50,
		(8,16): 50,
		(9,9): 50,
		(9,10): 100,
		(9,11): 50,
		(9,12): 50,
		(9,13): 100,
		(9,14): 50,
		(9,15): 50,
		(9,16): 50,
		(10,10): 50,
		(10,11): 33.3,
		(10,12): 50,
		(10,13): 50,
		(10,14): 100,
		(10,15): 100,
		(10,16): 50,
		(11,11): 50,
		(11,12): 50,
		(11,13): 50,
		(11,14): 100,
		(11,15): 50,
		(11,16): 50,
		(12,12): 50,
		(12,13): 72.7,
		(12,14): 50,
		(12,15): 50,
		(12,16): 50,
		(13,13): 50,
		(13,14): 50,
		(13,15): 50,
		(13,16): 50,
		(14,14): 50,
		(14,15): 50,
		(14,16): 50,
		(15,15): 50,
		(15,16): 50,
		(16,16): 50
	}

def main():
	winners = Counter()
	bracket = get_tourney_bracket()
	while(len(bracket) > 1):
		next_round = []
		for i in range(0, len(bracket), 2):
			seed1, team1 = bracket[i]
			seed2, team2 = bracket[i+1]
			winner = determine_winner(bracket[i], bracket[i+1]) if seed1 <= seed2 else determine_winner(bracket[i+1], bracket[i])
			next_round.append(winner)
			print(winner)
		bracket = next_round
		print()

def determine_winner(high_seed, low_seed):
	high_chance = get_history()[ high_seed[0], low_seed[0] ]
	low_chance = 100 - high_chance
	return weighted_choice({ high_seed: high_chance, low_seed: low_chance })


def weighted_choice(choices):
	total = sum(choices[c] for c in choices)
	r = random.uniform(0, total)
	upto = 0
	for c in choices:
		weight = choices[c]
		if upto + weight >= r:
			return c
		upto += weight

if __name__ == '__main__': main()